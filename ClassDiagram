classDiagram
    class RepositorioPublicacion {
        construct(PublicacionDTO publicacionDTO,DBConexion)
        buscarPor(string opcion)
        guardarPublicacion()
        eliminarPublicacion()
        actualizarPublicacion()
        crearPublicacion()

    }
    class PublicacionDTO{
        idUsuario
        Publicacion publicacion

    }
    class UsuarioSesionPuerto{
        darId()
        cargarLibro(Libro libros[])
        publicar(CrearPublicacion crearPublicacion)
    }
    class CrearPublicacion {
        constructCrearPublicacion(Publicacion publicacion,idUsuario)
        crearPublicacion(RepositorioCrearPublicacion,PublicacionDTO)
        crearDTO()
    }
    class Libro{
        autor
        titulo
        Tag tags[]
        constructLibro(autor,titulo,Tag tags[])
    }
    class Publicacion{
        Libro libros []
        string contenido
        constructPublicacion(Libro libros [],string contenido)

    }
    class RepositorioPublicacionInterface {
        <<interface>>
        mostrarPor()
        guardarPublicacion()
        eliminarPublicacion()
        actualicarPublicacion()
        crearPublicacion()
    }
    class Tag{
        tipo
    }
    class Administrador{
        constructAdministrador(RepositorioPublicacionInterface repositorioPublicacion)
        visualizarPublicacion()
        borrarPublicacion()


    }
    class RenderizarPublicacionAdministrador{
        mostrarPublicacion(RepositorioPublicacionInterface repositorioPublicacion)

    }
    class Ruta{

    }
    class NormasAplicacion{

    }
    class NormasAplicacionInterface{

    }
    class UsuarioSesionController{
        crearPublicacion(ruta)
        verPublicacion(ruta)
    }
    class UsuarioSesionPuertoInterface{
        darId()
        cargarLibro(Libro libros[])
        publicar(CrearPublicacion crearPublicacion)

    }

    class VerPublicacion{
        verPublicacion(RepositorioPublicacionInterface)
        obtenerIdUsuario()
        crearDTO()
    }

    class ValidarNormasPublicacion{
        constructor(agenteProfanityAPIInterface)
        esProfanity()
        avisarAdministrador()
    }
    class AgenteProfanityAPIInterface{
        darValidacionProfanity()
        darFlagsProfanity()
    }
    class AgenteProfanityAPI{
        darValidacionProfanity()
        darFlagsProfanity()
    }

    class ValidacionRequest{

    }

    RepositorioPublicacionInterface --|> RepositorioPublicacion
    CrearPublicacion --|> RepositorioPublicacionInterface
    RepositorioPublicacion--|>PublicacionDTO
    PublicacionDTO--|>Publicacion
    Publicacion--|>Libro
    Libro--|>Tag

    UsuarioSesionPuertoInterface--|>UsuarioSesionPuerto
    UsuarioSesionController--|>UsuarioSesionPuertoInterface
    UsuarioSesionPuerto--|>CrearPublicacion

    UsuarioSesionController--|>ValidacionRequest
    ValidacionRequest--|>NormasAplicacionInterface
    NormasAplicacionInterface--|>ValidarNormasPublicacion
    ValidarNormasPublicacion--|>AgenteProfanityAPIInterface
    AgenteProfanityAPIInterface--|>AgenteProfanityAPI

    ValidarNormasPublicacion--|>RepositorioPublicacionInterface

    Ruta--|>UsuarioSesionController
    UsuarioSesionPuerto--|>VerPublicacion
    VerPublicacion--|>RepositorioPublicacionInterface





